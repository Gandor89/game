{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["time","initState","level","elements","click","lives","elementsToClick","App","state","reset","window","location","reload","next","popUpNext","document","querySelector","all","querySelectorAll","style","display","setState","forEach","element","className","clearInterval","again","activeClick","e","i","length","setAttribute","popUpEnd","popUpAgain","target","setTimeout","setInterval","Math","round","random","secondElements","thirdElements","id","this","onClick","React","Component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abd5243a.chunk.js","sourcesContent":["import React from 'react';\n\nconst initState = {\n  level: 1,\n  elements: 1,\n  click: 0,\n  time: 0,\n  lives: 1,\n  elementsToClick: 0\n}\nlet time;\n\nclass App extends React.Component {\n  \n  state = initState;\n\n  reset = () => {\n    window.location.reload(); \n  }\n\n  // next level\n  next = () => {\n    const popUpNext = document.querySelector('#popUpNext');\n    const all = document.querySelectorAll('.grid > div');\n    popUpNext.style.display = 'none';\n    this.setState({\n      click: 0,\n      time: 0\n    })\n\n    all.forEach( element => {\n      element.className = '';\n    })\n\n    time = clearInterval(time);\n    \n  }\n\n  again = () => {\n    const all = document.querySelectorAll('.grid > div');\n    const popUpAgain = document.querySelector('#popUpAgain');\n    popUpAgain.style.display = 'none';\n    all.forEach( element => {\n      element.className = '';\n    })\n\n    this.setState({\n      elementsToClick: this.state.level,\n      time: 0\n    })\n\n    time = clearInterval(time);\n  }\n  \n  \n\n  activeClick = (e) => {\n\n    const all = document.querySelectorAll('.grid > div');\n    for (let i = 0; i < all.length; i++) {\n      all[i].setAttribute('value', i);\n    }\n\n    \n\n    const popUpNext = document.querySelector('#popUpNext');\n    const popUpEnd = document.querySelector('#popUpEnd');\n    const popUpAgain = document.querySelector('#popUpAgain');\n    \n    // error \n    if (e.target.className !== 'third' && this.state.click !== 0) {\n      this.setState({\n        click: 0,\n        time: 0,\n        lives: this.state.lives - this.state.elementsToClick,\n      })\n\n      setTimeout( () => {\n        if (this.state.lives <= 0) {\n          popUpEnd.style.display = 'flex';\n        }\n        if (this.state.lives > 0) {\n          popUpAgain.style.display = 'flex';\n        }\n\n      },0)\n\n      time = clearInterval(time);\n    }\n    // error END\n\n    if (this.state.click === 0) {\n      time = setInterval( () => {\n        this.setState({\n          time: this.state.time + 1\n        })\n      }, 1000);\n    } \n\n    if (e.target.className === '' && this.state.click === 0) {\n\n      e.target.className = 'first';\n      all[Math.round(Math.random() * 99 )].className = 'third';\n      for (let i = 0; i < this.state.elements - 1; i++) {\n        all[Math.round(Math.random() * 99 )].className = 'second';        \n      }\n\n      this.setState({\n        click: this.state.click + 1,\n      })\n      \n    }\n    \n    if (e.target.className === 'third') {\n\n      const secondElements = document.querySelectorAll('.grid > .second');\n      if (secondElements.length !== 0) {\n        for (let i = 0; i < 1; i++) {\n          const random = Math.round(Math.random() * (secondElements.length - 1));\n          secondElements[random].className = 'third'\n        }\n      }\n      \n      this.setState({\n        click: this.state.click + 1,\n      })\n\n      e.target.className = 'first';\n      \n\n      setTimeout( () => {\n        const thirdElements = document.querySelectorAll('.grid > .third');\n        if (thirdElements.length === 0) {\n          popUpNext.style.display = 'flex';\n          this.setState({\n            level: this.state.level + 1,\n            lives: this.state.lives + 1,\n            elements: this.state.elements + 1,\n            elementsToClick: this.state.elementsToClick + 1,\n          })\n        }\n      },0)      \n    }\n\n    setTimeout( () => {\n      const secondElements = document.querySelectorAll('.grid > .second');\n      const thirdElements = document.querySelectorAll('.grid > .third');\n      this.setState({\n        elementsToClick: secondElements.length + thirdElements.length\n      })\n    },0)\n\n    \n    \n  }\n\n  render() {\n    return(\n      <div className=\"app\">\n        <div id=\"popUpNext\">\n          <div>\n            <div>You have completed level: {this.state.level}</div>\n            <div>Do you want to play next level?</div>\n            <div className=\"noYes\">\n              <div>No</div>\n              <div onClick={this.next}>Yes</div>\n            </div>\n          </div>\n        </div>\n        <div id=\"popUpEnd\">\n          <div>\n            <div>You have no more lives.</div>\n            <div>Do you want to play again?</div>\n            <div className=\"noYes\">\n              <div>No</div>\n              <div onClick={this.reset}>Yes</div>\n            </div>\n          </div>\n        </div>\n        <div id=\"popUpAgain\">\n          <div>\n            <div>You have lost this game.</div>\n            <div>Do you want to play again?</div>\n            <div className=\"noYes\">\n              <div>No</div>\n              <div onClick={this.again}>Yes</div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid\" onClick={this.activeClick}>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n        <div className=\"stats\">\n\n          <div>Game Status</div>\n\n          <div>Time: <span>{this.state.time}s</span></div>\n\n          <div>Level: <span>{this.state.level}</span></div>\n\n          <div>Clicked: <span>{this.state.click}</span></div>\n\n          <div>Lives: <span>{this.state.lives}</span></div>         \n          \n        </div>\n      </div>\n    )\n  }\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}